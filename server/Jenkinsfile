pipeline {
    agent {
        kubernetes {
          label 'k8s-dev'
          defaultContainer 'agent'
        }
      }
    options {
        ansiColor('xterm')
        disableConcurrentBuilds(abortPrevious: false)
        timestamps()
    }
    environment {
        REPO = sh(script: 'echo $GIT_URL | awk -F/ \'{print $NF}\' | sed -e "s/.git$//"', returnStdout: true).trim()
        GIT_ORG = sh(script: 'echo $GIT_URL | awk -F/ \'{print $4}\'', returnStdout: true).trim()
        IMAGE_URL = "ghcr.io/${env.GIT_ORG}/${env.REPO}:${env.BRANCH_NAME}-${env.GIT_COMMIT}"
    }
    stages {
        stage('Docker') {
            steps {
                withFolderProperties {
                    withCredentials([file(credentialsId: 'jfrog_maven_repository_settings', variable: 'MVN_SETTINGS_FILE')]) {
                        sh "cp ${env.MVN_SETTINGS_FILE} ./settings.xml"
                        sh "docker build  --no-cache -t ${IMAGE_URL} ."
                    }
                    withCredentials([usernamePassword(credentialsId: 'github_registry', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login ghcr.io -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                        sh "docker push ${IMAGE_URL}"
                    }
                    script {
                        echo "${env.IMAGE_URL}"
                        currentBuild.description = "Image URL: ${IMAGE_URL}\n"
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                echo "deploying image ${IMAGE_URL}"
                build job: '/Build/service_installer', parameters: [validatingString(name: 'IMAGE_URL', value: "${IMAGE_URL}")]
            }
        }
    }

     post {
        always {
            sh "docker rmi ${IMAGE_URL} || true"
            cleanWs()
        }
    }
}